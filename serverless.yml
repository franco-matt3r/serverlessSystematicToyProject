useDotenv: true
plugins:
  - serverless-iam-roles-per-function

org: francomatt3r
app: francopracticeawsproject
service: ${env:SERVICE_NAME}
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: us-west-2

functions:
  Function:
    handler: handler.practiceProcessNewFile
    timeout: 30
    memorySize: 128
    environment:
      DESTINATION_BUCKET: !Sub franco-practice-bucket2-${AWS::AccountId}
    events:
      - sqs:
          arn: !GetAtt Queue.Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:ReceiveMessage
        Resource: !GetAtt Queue.Arn
      - Effect: Allow
        Action:
          - "s3:GetObject"
        Resource: 
          - !GetAtt Bucket1.Arn
          - !Sub ${Bucket1.Arn}/*
      - Effect: Allow
        Action:
          - "s3:PutObject"
        Resource:
          - !GetAtt Bucket2.Arn # Remove this to check if you needed it
          - !Sub ${Bucket2.Arn}/*  

resources:
  Resources:
    Topic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: !GetAtt Queue.Arn
            Protocol: sqs
    Queue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 300
    TopicToQueuePermission:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt Queue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref Topic
        Queues:
          - !Ref Queue
    FunctionLogGroup:
      Type: AWS::Logs::LogGroup
      DeletionPolicy: Retain
      Properties:
        LogGroupName: /aws/lambda/practiceProcessNewFile
    Bucket2:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub franco-practice-bucket2-${AWS::AccountId}
    Bucket1:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub franco-practice-bucket1-${AWS::AccountId}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:*
              Topic: !Ref Topic
    Bucket1ToTopicPermission:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: sns:Publish
              Resource: !Ref Topic
              Condition:
                ArnEquals:
                  aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::franco-practice-bucket1-${AWS::AccountId}
        Topics:
          - !Ref Topic
